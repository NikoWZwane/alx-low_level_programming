!<arch>
0-isupper.c/    0           0     0     644     225       `
#include "main.h"

/**
 * _isupper - checks for lowercase character.
 * @c: c to be checked
 * Return: 1 for upper car  0 for otherwise
 *
 */

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
	return (1);
	}
	return (0);
}

0-memset.c/     0           0     0     644     320       `
#include "main.h"
#include <stdio.h>

/**
 * _memset - prints buffer in hexa
 * @b: the address of memory to print
 * @s: the size of the memory to print
 * @n: bytes
 * Return: Always 0 (Success)
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;
	return (s);
}
0-strcat.c/     0           0     0     644     356       `
#include "main.h"
#include <stdio.h>

/**
 * _strcat - concatenates two strings.
 * @dest: string two
 * @src: string one
 * Return: Always 0.
 */
char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     414       `
#include "main.h"
#include <stdio.h>

/**
 * _atoi - convert a string to an integer
 * @s: string
 * Return: Always 0.
 */
int _atoi(char *s)
{
	int c = 0;
	unsigned int ni = 0;
	int min = 1;
	int lsi = 0;

	while (s[c])
	{
	if (s[c] == 45)
	{
	min *= -1;
	}
	while (s[c] >= 48 && s[c] <= 57)
	{
	lsi = 1;
	ni = (ni * 10) + (s[c] - '0');
	c++;
	}
	if (lsi == 1)
	{
	break;
	}
	c++;
	}
	ni *= min;
	return (ni);
}

1-isdigit.c/    0           0     0     644     205       `
#include "main.h"

/**
 * _isdigit - check the for for digit
 * @c: check c
 * Return: 1 for digit and 0 for otherwise.
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
	return (1);
	}
	return (0);
}

1-memcpy.c/     0           0     0     644     330       `
#include "main.h"
#include <stdio.h>

/**
 * _memcpy  - prints buffer in hexa
 * @dest: the address of destination
 * @src: the size of the source
 * @n: input
 * Return: Always 0 (Success)
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];
	return (dest);
}
1-strncat.c/    0           0     0     644     393       `
#include "main.h"
#include <stdio.h>

/**
 * _strncat - concatenates two strings
 * @dest: string destination
 * @src: string source
 * @n: number of bytes
 * Return: Always 0.
 */
char *_strncat(char *dest, char *src, int n)
{
	int index = 0, destlen = 0;

	while (dest[index++])
		destlen++;
	for (index = 0; src[index] && index < n; index++)
		dest[destlen] = src[index];
	return (dest);
}

2-strchr.c/     0           0     0     644     290       `
#include "main.h"
#include <stdio.h>

/**
 * _strchr - function that locates
 * @s: in the string
 * @c: occurrence of the charact
 * Return: Always 0.
 */
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (s + i);
	}
	return (NULL);
}
2-strlen.c/     0           0     0     644     207       `
#include <stdio.h>

/**
 * _strlen -  returns the length of a string
 * @s: pointed string
 * Return: Always 0.
 */
int _strlen(char *s)
{
	size_t  length = 0;

	while (*s++)
		length++;
	return (length);
}

2-strncpy.c/    0           0     0     644     443       `
#include "main.h"
#include <stdio.h>

/**
 * _strncpy - copies a string
 * @dest: string destination
 * @src: source string
 * @n: number of bytes
 * Return: Always 0.
 */
char *_strncpy(char *dest, char *src, int n)
{
	int index = 0, srclen = 0;

	while (src[index++])
		srclen++;
	for (index = 0; src[index] && index < n; index++)
		dest[index] = src[index];
	for (index = srclen; index < n; index++)
		dest[index] = '\0';
	return (dest);
}

3-islower.c/    0           0     0     644     259       `
#include "main.h"

/**
 * _islower - function that checks for lowercase character
 * c is lowercase
 * Return: 1 for lower case or 0 for else
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}

3-puts.c/       0           0     0     644     230       `
#include "main.h"

/**
 * _puts -  prints a string, followed by a new line, to
 * @str: string to be printed
 * Return: Always 0.
 */
void _puts(char *str)
{
	for (; *str != '\0'; str++)
	{
		_putchar(*str);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     257       `
#include "main.h"
#include <stdio.h>

/**
 * _strcmp - compares two strings
 * @s1: first string
 * @s2: second string
 * Return: Always 0.
 */
int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}
	return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     371       `
#include "main.h"
/**
 * _strspn - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int r;

	while (*s)
	{
		for (r = 0; accept[r]; r++)
		{
			if (*s == accept[r])
			{
				n++;
				break;
			}
			else if (accept[r + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     322       `
#include "main.h"

/**
 * _isalpha - function that checks for alphabetic character
 * @c: is a letter, lowercase or uppercase
 * Return: 1 for alphabetic charect 0 for othewise
 */
int _isalpha(int c)
{
	if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');


}
4-strpbrk.c/    0           0     0     644     290       `
#include "main.h"
/**
 * _strpbrk - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
char *_strpbrk(char *s, char *accept)
{
		int k;

		while (*s)
		{
			for (k = 0; accept[k]; k++)
			{
			if (*s == accept[k])
			return (s);
			}
		s++;
		}

	return ('\0');
}
5-strstr.c/     0           0     0     644     367       `
#include "main.h"
/**
 * _strstr - Entry point
 * @haystack: input
 * @needle: input
 * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *l = haystack;
		char *p = needle;

		while (*l == *p && *p != '\0')
		{
			l++;
			p++;
		}

		if (*p == '\0')
			return (haystack);
	}

	return (0);
}

6-abs.c/        0           0     0     644     213       `
#include "main.h"

/**
 * _abs -  computes the absolute value of an integer.
 * @i: value of an integer
 * Return: Always 0.
 */
int _abs(int i)
{
	if (i >= 0)
	{
		return (i);
	}
	else
	{
		return (i * -1);
	}
}

9-strcpy.c/     0           0     0     644     309       `
#include "main.h"
#include <stdio.h>

/**
 * _strcpy - function that copies the string pointed
 * @src: source value
 * @dest: destination
 * Return: Always 0.
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i++] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

